import logging
import os
import bot.keyboards as kb
import database.db_requests as rq
from aiogram import Bot, F, Router
from aiogram.filters import CommandStart, Command, StateFilter, CommandObject
from aiogram.enums import ContentType
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from bot.predictions import predict_class


router = Router()


# =====================================================================================================================================
# COMMANDS
# =====================================================================================================================================


# /start_bot
@router.message(Command('start_bot'))
async def cmd_start_bot(message: Message):
    await rq.set_user(message.from_user.id)
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                         reply_markup=kb.main_keyboard)


# /add_info
@router.message(Command("add_info"))
async def cmd_add_info(message: Message):
    await message.answer("üåê|–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç ¬´–≠—Ä–º–∏—Ç–∞–∂-–£—Ä–∞–ª¬ª: https://i-z-o.art/constitutor/centr-ermitazh-ural/\nüéß|–í—Å–µ –∞—É–¥–∏–æ–ª–µ–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ: https://izo.t2.ru/museum/14")


# =====================================================================================================================================
# MAIN MENU - 1 [–ù–ê–ô–¢–ò –ö–ê–†–¢–ò–ù–£ –ü–û –ö–û–õ–õ–ï–ö–¶–ò–ò –ú–£–ó–ï–Ø]
# =====================================================================================================================================


@router.message(CommandStart(deep_link=True))
async def handle_deep_link_start(message: Message, command: CommandObject):
    if command.args and command.args.startswith("painting_"):
        painting_id = command.args.split("_")[1]
        painting_data = await rq.get_painting_by_id(painting_id)

        if painting_data:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(
                    text='‚¨ÖÔ∏è –ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ',
                    callback_data=f'collection_{painting_data.collection_id}'
                )]]
            )


            caption = (
                f'<b><i>{painting_data.name}</i></b>\n\n'
                f'<i>{painting_data.author}</i>\n'
                f'<i>{painting_data.year}</i>\n'
                f'<i>{painting_data.material}</i>\n'
                f'<i>{painting_data.size}</i>\n\n'
                f'<i>{painting_data.image_page_link}</i>'
            )

            await message.answer_photo(
                photo=painting_data.image,
                caption=caption,
                parse_mode="HTML"
            )

            if painting_data.audio:
                await message.answer_audio(
                    audio=painting_data.audio,
                    caption=f'–í—Å–µ –∞—É–¥–∏–æ–ª–µ–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ: {painting_data.audio_page_link}\n'
                )

            await message.answer(
                f'<blockquote>{painting_data.description}</blockquote>',
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            await message.answer("–ö–∞—Ä—Ç–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=kb.main_keyboard)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.main_keyboard)


@router.message(F.text == '–ù–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω—É –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –º—É–∑–µ—è')
async def catalog(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –º—É–∑–µ—è:', 
                         reply_markup=await kb.collections())


@router.callback_query(F.data.startswith('collection_'))
async def collection(callback: CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é.')

    collection_id = int(callback.data.split('_')[1])
    text, keyboard = await kb.paintings(collection_id)

    await callback.message.answer(
        text,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True 
    )


@router.callback_query(F.data == 'to_main_menu')
async def to_main_menu_handler(callback: CallbackQuery):
    await callback.message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", 
                                  reply_markup= kb.main_keyboard)
    await callback.answer()


@router.callback_query(F.data == 'to_all_collections')
async def to_main_menu_handler(callback: CallbackQuery):
    await callback.message.answer("–í—ã–±–æ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –º—É–∑–µ—è.", 
                                  reply_markup= await kb.collections())
    await callback.answer()


# =====================================================================================================================================
# MAIN MENU - 2 [–ù–ê–ô–¢–ò –ö–ê–†–¢–ò–ù–£ –ü–û –ù–ê–ó–í–ê–ù–ò–Æ]
# =====================================================================================================================================


@router.message(F.text == '–ù–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é')
async def ask_painting_name(message: Message, state: FSMContext):
    await message.answer('üñºÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã.',
        reply_markup=kb.main_keyboard,
        callback_data='search_by_name'
    )
    await state.set_state("waiting_for_painting_name")


@router.message(StateFilter("waiting_for_painting_name"), F.content_type == ContentType.TEXT)
async def painting_name_sent(message: Message, state: FSMContext):
    painting_name = message.text.strip()
    painting_ids = await rq.get_painting_ids_by_name(painting_name)

    if painting_ids:
        for painting_id in painting_ids:
            painting_data = await rq.get_painting_by_id(painting_id)

            if painting_data:
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(
                        text='‚¨ÖÔ∏è –ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é',
                        callback_data='to_search_by_name'
                    )]]
                )

                caption = (
                    f'<b><i>{painting_data.name}</i></b>\n\n'
                    f'<i>{painting_data.author}</i>\n'
                    f'<i>{painting_data.year}</i>\n'
                    f'<i>{painting_data.material}</i>\n'
                    f'<i>{painting_data.size}</i>\n\n'
                    f'<i>{painting_data.image_page_link}</i>'
                )

                await message.answer_photo(
                    photo=painting_data.image,
                    caption=caption,
                    parse_mode="HTML"
                )

                if painting_data.audio:
                    await message.answer_audio(
                        audio=painting_data.audio,
                        caption=f'–í—Å–µ –∞—É–¥–∏–æ–ª–µ–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ: {painting_data.audio_page_link}\n'
                    )

                await message.answer(
                    f'<blockquote>{painting_data.description}</blockquote>',
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            else:
                await message.answer("–û–¥–Ω–∞ –∏–∑ –∫–∞—Ä—Ç–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.")
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ä—Ç–∏–Ω–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                             reply_markup=kb.main_keyboard)

    await state.clear()


@router.callback_query(F.data == 'to_search_by_name')
async def back_to_search_by_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üñºÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã.",
    )
    await state.set_state("waiting_for_new_painting_name")
    await callback.answer()


@router.message(StateFilter("waiting_for_new_painting_name"), F.content_type == ContentType.TEXT)
async def painting_name_sent(message: Message, state: FSMContext):
    painting_name = message.text.strip()
    painting_ids = await rq.get_painting_ids_by_name(painting_name)

    if painting_ids:
        for painting_id in painting_ids:
            painting_data = await rq.get_painting_by_id(painting_id)

            if painting_data:
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(
                        text='‚¨ÖÔ∏è –ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é',
                        callback_data='to_search_by_name'
                    )]]
                )

                caption = (
                    f'<b><i>{painting_data.name}</i></b>\n\n'
                    f'<i>{painting_data.author}</i>\n'
                    f'<i>{painting_data.year}</i>\n'
                    f'<i>{painting_data.material}</i>\n'
                    f'<i>{painting_data.size}</i>\n\n'
                    f'<i>{painting_data.image_page_link}</i>'
                )

                await message.answer_photo(
                    photo=painting_data.image,
                    caption=caption,
                    parse_mode="HTML"
                )

                if painting_data.audio:
                    await message.answer_audio(
                        audio=painting_data.audio,
                        caption=f'–í—Å–µ –∞—É–¥–∏–æ–ª–µ–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ: {painting_data.audio_page_link}\n'
                    )

                await message.answer(
                    f'<blockquote>{painting_data.description}</blockquote>',
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            else:
                await message.answer("–û–¥–Ω–∞ –∏–∑ –∫–∞—Ä—Ç–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.")
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ä—Ç–∏–Ω–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                             reply_markup=kb.main_keyboard)

    await state.clear()


# =====================================================================================================================================
# MAIN MENU - 3 [–ù–ê–ô–¢–ò –ö–ê–†–¢–ò–ù–£ –ü–û –§–û–¢–û–ì–†–ê–§–ò–ò]
# =====================================================================================================================================


# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class PhotoSearchState(StatesGroup):
    choosing_collection = State()
    waiting_for_photo = State()


@router.message(F.text == '–ù–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω—É –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏')
async def ask_collection_for_photo_search(message: Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞:',
                         reply_markup=await kb.collections(mode="photo"))  
    await state.set_state(PhotoSearchState.choosing_collection)


@router.callback_query(F.data.startswith('photo_collection_'), StateFilter(PhotoSearchState.choosing_collection))
async def collection_chosen_for_photo(callback: CallbackQuery, state: FSMContext):
    collection_id = int(callback.data.split('_')[2])  # —Ç–µ–ø–µ—Ä—å –∏–Ω–¥–µ–∫—Å 2
    await state.update_data(collection_id=collection_id)

    await callback.message.answer('üì∑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞—Ä—Ç–∏–Ω—ã.')
    await state.set_state(PhotoSearchState.waiting_for_photo)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@router.message(StateFilter(PhotoSearchState.waiting_for_photo), F.content_type == ContentType.PHOTO)
async def handle_photo_with_collection(message: Message, state: FSMContext, bot: Bot):
    file_path = None
    try:
        user_data = await state.get_data()
        collection_id = user_data.get("collection_id")
        print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è: {collection_id}")

        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_path = f"temp_{message.from_user.id}.jpg"
        await bot.download_file(file.file_path, destination=file_path)

        print(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {file_path}")

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ –ø–æ–∏—Å–∫
        painting_prediction_name = predict_class(file_path, collection_id) 
        print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞: {painting_prediction_name}")
        painting_id = await rq.get_painting_id_by_prediction(painting_prediction_name)

        if painting_id:
            painting_data = await rq.get_painting_by_id(painting_id)
            if painting_data:
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(
                        text='‚¨ÖÔ∏è –ù–∞–π—Ç–∏ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç–∏–Ω—É –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏',
                        callback_data='to_search_by_photo'
                    )]]
                )

                caption = (
                    f'<b><i>{painting_data.name}</i></b>\n\n'
                    f'<i>{painting_data.author}</i>\n'
                    f'<i>{painting_data.year}</i>\n'
                    f'<i>{painting_data.material}</i>\n'
                    f'<i>{painting_data.size}</i>\n\n'
                    f'<i>{painting_data.image_page_link}</i>'
                )

                await message.answer_photo(
                    photo=painting_data.image,
                    caption=caption,
                    parse_mode="HTML"
                )

                if painting_data.audio:
                    await message.answer_audio(
                        audio=painting_data.audio,
                        caption=f'–í—Å–µ –∞—É–¥–∏–æ–ª–µ–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ: {painting_data.audio_page_link}\n'
                    )

                await message.answer(
                    f'<blockquote>{painting_data.description}</blockquote>',
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            else:
                await message.answer("–ö–∞—Ä—Ç–∏–Ω—É –Ω–∞–π—Ç–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤ –±–∞–∑–µ.", reply_markup=kb.main_keyboard)
        else:
            await message.answer("–ö–∞—Ä—Ç–∏–Ω–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.", reply_markup=kb.main_keyboard)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=kb.main_keyboard)

    finally:
        if file_path and os.path.exists(file_path):
            os.remove(file_path)

        await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–π—Ç–∏ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç–∏–Ω—É –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
@router.callback_query(F.data == 'to_search_by_photo')
async def to_photo_search_again(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞:',
                                   reply_markup=await kb.collections(mode="photo")) 
    await state.set_state(PhotoSearchState.choosing_collection)
    await callback.answer()


# =====================================================================================================================================