from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command

from aiogram.filters import StateFilter=
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
import app.database.requests as rq

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã –∏–ª–∏ –µ—ë —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.', reply_markup=kb.main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer("–ü–æ–∫–∞ –Ω–∏–∫–∞–∫–æ–π –ø–æ–º–æ—â–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /audio
@router.message(Command("audio"))
async def cmd_help(message: Message):
    await message.answer("üéß|–í—Å–µ –∞—É–¥–∏–æ–ª–µ–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ: https://izo.t2.ru/museum/14")

@router.message(F.text == '–ü–æ–º–æ—â—å')
async def catalog(message: Message):
    await message.answer('–ü–æ–∫–∞ –Ω–∏–∫–∞–∫–æ–π –ø–æ–º–æ—â–∏.', reply_markup=kb.main_keyboard)

@router.message(F.text == '–Ø–∑—ã–∫')
async def catalog(message: Message):
    await message.answer('Only russian', reply_markup=kb.main_keyboard)

@router.message(F.text == '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
async def catalog(message: Message):
    await message.answer('–í–∏–∫–∏–ø–µ–¥–∏—è: https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%B3%D0%BB%D0%B0%D0%B2%D0%BD%D0%B0%D1%8F_%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B8%D1%86%D0%B0', reply_markup=kb.main_keyboard)



@router.message(F.text == '–ö–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω—ã –º—É–∑–µ—è')
async def catalog(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –º—É–∑–µ—è.', reply_markup=await kb.collections())


@router.callback_query(F.data.startswith('collection_'))
async def collection(callback: CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é.')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω—É.',
                                  reply_markup=await kb.paintings(callback.data.split('_')[1]))



@router.callback_query(F.data.startswith('painting_'))
async def collection(callback: CallbackQuery):
    painting_id = callback.data.split('_')[1]
    painting_data = await rq.get_painting(painting_id)

    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç–∏–Ω—É.')
    await callback.message.answer_photo(
        painting_data.image_url,  
        caption=f'<b><i>{painting_data.name}</i></b>\n\n'
                f'<i>{painting_data.author}</i>\n'
                f'<i>{painting_data.year}</i>\n\n'
                f'<blockquote>{painting_data.description}</blockquote>',
        parse_mode="HTML"
    )
"""
—Ç–æ –∂–µ —Å–∞–º–æ–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–≥—Ä—É–∂–∞–µ—Ç—Å—è –µ–≥–æ –ø—Ä–µ–≤—å—é.
@router.callback_query(F.data.startswith('painting_'))
async def collection(callback: CallbackQuery):
    painting_id = callback.data.split('_')[1]
    painting_data = await rq.get_painting(painting_id)

    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç–∏–Ω—É.')
    await callback.message.answer(
        f'{painting_data.image_url}\n\n'
        f'<b><i>{painting_data.name}</i></b>\n\n'
        f'<i>{painting_data.author}</i>\n'
        f'<i>{painting_data.year}</i>\n\n'
        f'<blockquote>{painting_data.description}</blockquote>',
        parse_mode="HTML"
    )
"""

@router.message(F.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã')
async def ask_painting_name(message: Message, state: FSMContext):
    await message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã.', 
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state("waiting_for_painting_name")

@router.message(StateFilter("waiting_for_painting_name"))
async def painting_name_sent(message: Message, state: FSMContext):
    painting_name = message.text
    painting_data = await rq.get_painting_by_name(painting_name)
        
    if painting_data:
        await message.answer_photo(
            painting_data.image_url,  
            caption=f'<b><i>{painting_data.name}</i></b>\n\n'
                f'<i>{painting_data.author}</i>\n'
                f'<i>{painting_data.year}</i>\n\n'
                f'<blockquote>{painting_data.description}</blockquote>\n\n'
                f'<i>{painting_data.material}</i>\n'
                f'<i>{painting_data.size}</i>',
            parse_mode="HTML",
            reply_markup=kb.main_keyboard
        )
    else:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–µ –Ω–µ—Ç.", 
            reply_markup=kb.main_keyboard
        )
    await state.clear()

@router.callback_query(F.data == 'to_main_menu')
async def to_main_menu_handler(callback: CallbackQuery):
    await callback.message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup= kb.main_keyboard)
    await callback.answer()

@router.callback_query(F.data == 'to_all_collections')
async def to_main_menu_handler(callback: CallbackQuery):
    await callback.message.answer("–í—ã–±–æ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –º—É–∑–µ—è.", reply_markup= await kb.collections())
    await callback.answer()
